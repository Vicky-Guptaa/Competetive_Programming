{
    "Disjoint Set": {
        "prefix": "dsu",
        "body": [
            "class DisjSet",
            "{",
            "    int *parent;",
            "    int *rank;",
            "    int size;",
            "",
            "public:",
            "    DisjSet(int capacity)",
            "    {",
            "        size = capacity;",
            "        parent = new int[size];",
            "        rank = new int[size];",
            "        initializer();",
            "    }",
            "    void initializer()",
            "    {",
            "        for (int i = 0; i < size; i++)",
            "        {",
            "            parent[i] = i;",
            "            rank[i] = 0;",
            "        }",
            "    }",
            "    int Find(int x)",
            "    {",
            "        if (parent[x] == x)",
            "            return x;",
            "        parent[x]=Find(parent[x]);",
            "        return parent[x];",
            "    }",
            "    void Union(int x, int y)",
            "    {",
            "        int x_rep = Find(x);",
            "        int y_rep = Find(y);",
            "",
            "        if (x_rep == y_rep)",
            "            return;",
            "        if (rank[x_rep] > rank[y_rep])",
            "            parent[y_rep] = x_rep;",
            "        else if (rank[y_rep] > rank[x_rep])",
            "            parent[x_rep] = y_rep;",
            "        else",
            "        {",
            "            parent[y_rep] = x_rep;",
            "            rank[x_rep]++;",
            "        }",
            "    }",
            "}; ",
            ""
        ],
        "description": "Disjoint Set"
    },
    "Prime": {
        "prefix": "prime",
        "body": [
            "vector<int> Prime_Sieve(ll n)",
            "{",
            "    vector<int> prime(n + 1, 1);",
            "    for (ll i = 2; i <= n; i++)",
            "    {",
            "        if (prime[i] != 1)",
            "            continue;",
            "        for (ll j = i * i; j <= n; j += i)",
            "        {",
            "            prime[j] = i;",
            "        }",
            "    }",
            "    return prime;",
            "}",
            "vector<int> Prime_Factor_Sieve(ll n, vector<int> Sieve)",
            "{",
            "    vector<int> factor;",
            "    while (Sieve[n] != 1)",
            "    {",
            "        factor.push_back(Sieve[n]);",
            "        n /= Sieve[n];",
            "    }",
            "    if (n != 1)",
            "        factor.push_back(n);",
            "    sort(factor.begin(), factor.end());",
            "    return factor;",
            "}"
        ],
        "description": "Prime"
    }
}